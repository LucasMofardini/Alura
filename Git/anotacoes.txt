git config --local user.name "Seu nome aqui" //Quando inciar pela primeira vez o git
git config --local user.email "seu@email.aqui" //Quando inciar pela primeira vez o git
//Se passar o parametro --local ele vai ficar com essas alterações apenas no repositorio

git init //Inicializa o git e informa que existe um repositorio

git status //Mostra o status do repositorio 

git commit -m "" //Criando um check Point de mudança //Mensagens descritivas no commit

git log //Mostra informaçoes sobre os commits 
git log --oneline //Mostra informações sobre os commits em uma linha, informações resumidas
git log -p //Mostra informações sobre os commits , cógido atualizado dentro do commit 
git log --pretty="parametros de formatação" //Para uma formatação personalizada  
https://devhints.io/git-log //Site que contém informações sobre o git-log e seus formatos
//Botão 'Q' ele sai do git log no windows

//Commitar a cada alteração valida //Uma pequena funcionalidade //Resolução de bug
//Criar uma branch para cara tarefa

git checkout -b <nome da branch> //Para Criar uma branch e ja entrar nela

git merge <branch> //Para unir a branch que voce está com outra pegando suas alterações
git rebase <branch> //Igual o merge
//Diferenças entre o git merge e o git rebase
//O git merge gera um commit com o merge entre as 2 branches
//O git rebase faz o merge entre as 2 porém deixa o historico do log mais linear,
//Com o ultimo commit feito na branch da alteração
//Explicação do Alura - 'O merge junta os trabalhos e gera um merge commit. O rebase aplica os commits de outra branch na branch atual'.

//Se voce tentar dar o git merge e der conflito.
1 - Você corrigi os conflitos no codigo mesmo (O VSCODE ajuda);
2 - Você da um 'git add .', para adicionar a correção ao git
3 - Você da um 'git commit', para informar ao git que você corrigiu os conflitos